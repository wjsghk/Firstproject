
public class DefineClass {
//객체지향 프로그램:oop (Object Oriented Programming)
	//1.상속
	//2.다형성
	//3.캡슐화(=정보은닉)
	
//	          속성(멤버변수=자동초기화)   *자동초기화->명시적초기화->초기화블럭->생성자    순서로 실행된다
//	                   1) 인스턴스 변수 
//	                      -객체 생성을 통해 사용가능하다.
//	                      -생성자에 의해 초기화 된다.
//	                   2) 스태틱(클래스)변수
//                        -객체 생성 유무의 상관없이 사용가능하다
//                        -필요에 따라서 직접 초기화한다.
//                        -객체에서 공유한다.
//             초기화블럭     1)인스턴스 초기화 블럭
//                        -인스턴스 변수를 초기화 한다
//                      2)클래스(static)초기화블럭
//                        -클래스 변수를 초기화한다.	
//                             
//               생성자        -멤버변수(인스턴스변수)를 초기화한다
//                       -클래스이름과 동일한다
//                       -매개변수 정의 할 수 있다.
//                       -오버로딩 가능하다.
//                       -객체 생성시 딱 한번 호출(사용)되어 진다.
//                       -생성자간 호출이 가능하다(this)라고  하는것
//                       -멤버변수와 매개변수를 구분하기 위해 this속성을 사용한다.
//	                     -기본생성자가 모든 클래스에 존재한다.(생략이 가능함)
//	                      기능(메소드) 1)인스턴스 메소드
//                        -객체를 생성해야 사용가능하다
//                        -인스턴스와 클래스 멤버를 모두 사용 할 수 있다.
//                        
//                      2)클래스(static)메소드
//                        -객체 생성 유무와 상관없이 사용가능하다
//                        -클래스 멤버만 사용 할 수 있다.
             
	
	//**위에 정의한거 예시 
//	           int iv;//인스턴스 변수
//           
//          	static int cv;//클래스(static)변수
//             
//	          {//인스턴스 블럭
//	             iv = 10;
//             }
//             static{//클래스블럭
//            	 cv=20;
//             }
//             Defineclass(){//기본 생성자<=()
//            	
//             }
//             Defineclass(int iv){//생성자의 오버로딩
//            	this.iv = 30;
//            	 }
//             void instanceMethod(int x) {// 메소드 오버로딩 ,인스턴스 메소드<=void 
//            	 iv =50;
//            	 cv = 60;
//             }
//             static void instanceMethod() {//클래스 메소드
//            	 cv =70;
//            	 iv = 80;//인스턴스 멤버 사용시 오류 발생한다.
//             }
                       
}
